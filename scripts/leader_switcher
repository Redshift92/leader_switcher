#!/usr/bin/env python

import rospy
import rospkg
import os
import json
from PIL import Image

# from leader_switcher import solver
import leader_switcher.solver as solver

from std_msgs.msg import String

rospy.init_node('leader_switcher', anonymous=True)
pub = rospy.Publisher('plan2rviz_notifier', String, queue_size=10)
map_path = os.path.join(rospkg.RosPack().get_path('leader_switcher'), 'maps', 'map_3_light.png')
# map_path = os.path.join(rospkg.RosPack().get_path('leader_switcher'), 'maps', 'map_fake_2.png')
map_i = Image.open(map_path)
rate = rospy.Rate(2) # 1hz

black = (0,0,0,255)
red = (255,0,0,255)
green = (0,255,0,255)
blue = (0,0,255,255)
white = (255,255,255,255)

# black = (0,0,0)
# red = (255,0,0)
# green = (0,255,0)
# blue = (0,0,255)
# white = (255,255,255)


obstacles_edges = []
obstacles_corners = []
obstacles = []
start_positions = []
goal_positions = []
free_space = []
leaders = []

def coord_diff(c1, c2):
    return (c1[0]-c2[0], c1[1]-c2[1])

def sort_start_goal():
    global start_positions, goal_positions
    diff_pos = None
    diffs = set()
    ordered_sp_diff = []
    for sp in start_positions:
        diffs.add(coord_diff(start_positions[0], sp))
        ordered_sp_diff.append(coord_diff(start_positions[0], sp))
    for c_i, candidate in enumerate(goal_positions):
        diff_pos = []
        g_diffs = set()
        for gp_i, gp in enumerate(goal_positions):
            g_diffs.add(coord_diff(candidate, gp))
            diff_pos.append((coord_diff(candidate, gp), gp_i))
        if g_diffs == diffs:
            break
    sorted_gp = [None]*len(goal_positions)
    for d_p in diff_pos:
        sorted_gp[ordered_sp_diff.index(d_p[0])] = goal_positions[d_p[1]]
    goal_positions = sorted_gp


def is_edge(x,y):
    white_ng = 0
    for xx in [(-1,0),(1,0),(0,1),(0,-1)]:
        if map_i.getpixel((x+xx[0],y+xx[1])) == white:
            white_ng += 1
    if white_ng > 1:
        return (True, True)
    elif white_ng == 1:
        return (True, False)
    return (False, False)

players = { 'obstacles': [], 'agents': [] }
for x in range(map_i.size[0]):
    for y in range(map_i.size[1]):
        pix = map_i.getpixel((x, map_i.size[1] - y - 1))
        if pix == black:
            edge_corner = is_edge(x, map_i.size[1] - y - 1)
            if edge_corner[0]:
                obstacles.append((x,y))
                if edge_corner[1]:
                    players['obstacles'].append((x,y, {'rgb': [255,255,0]}))
                    obstacles_corners.append((x,y))
                else:
                    players['obstacles'].append((x,y))
                    obstacles_edges.append((x,y))
        elif pix == red or pix == green:
            start_positions.append((x,y))
            if pix == red:
                players['agents'].append((x,y))
            else:
                leaders.append(len(start_positions)-1)
                players['agents'].append((x,y, {'rgb': [0,255,0]}))
        elif pix == blue:
            players['agents'].append((x,y, {'rgb': [0,0,255]}))
            goal_positions.append((x,y))
        else:
            free_space.append((x,y))

pub.publish(json.dumps(players))

sort_start_goal()
print(start_positions)
print(goal_positions)

import time

s = time.time()
# graph_data = {}
# graph_data['free_space'] = free_space
# graph_data['obstacles'] = [obstacles_corners, obstacles_edges, obstacles, obstacles_corners + obstacles_edges]
# graph_data['start_positions'] = start_positions
# graph_data['leaders'] = leaders
# graph_data['goal_positions'] = goal_positions
# graph_data['size'] = map_i.size
# with open('ww.json','w+') as ww:
#     ww.write(json.dumps(graph_data))
#
# import sys
# sys.exit(1)

print(leaders)
solver.init_graph(free_space, [obstacles_corners, obstacles_edges, obstacles, obstacles_corners + obstacles_edges],
                    start_positions, leaders, goal_positions, map_i.size)
print(time.time() - s)

edges = solver.get_graph_edges()
players['edges'] = [ [[],[]] ]
for edge in edges:
    players['edges'][0][0].append(edge[0][0])
    players['edges'][0][1].append(edge[0][1])
    players['edges'][0][0].append(edge[1][0])
    players['edges'][0][1].append(edge[1][1])
pub.publish(json.dumps(players))

solver.run()
print('run done')
states = solver.get_states_sequence()
print(states)

players = { 'agents': None }

while not rospy.is_shutdown():
    players['agents'] = states.pop()[0:-1]
    pub.publish(json.dumps(players))
    rate.sleep()
